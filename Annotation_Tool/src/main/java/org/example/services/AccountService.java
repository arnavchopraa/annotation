package org.example.services;

import jakarta.ws.rs.core.Response;
import org.example.exceptions.EmailException;
import org.example.importmodels.Association;
import org.example.importmodels.Student;
import org.example.importmodels.Submission;
import org.example.models.SubmissionDB;
import org.example.models.User;
import org.example.utils.ServerUtils;
import org.example.importmodels.Coordinator;

import javax.sql.rowset.serial.SerialBlob;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.List;

public class AccountService {
    private final EmailService emailService = new EmailService();

    /**
     * Automatically creates accounts for coordinators, once files have been uploaded
     *
     * @param coordinators List of coordinators extracted from Excel file, generated by ProjectForum
     * @throws RuntimeException if email containing login credentials could not be sent.
     */
    public void createCoordinatorsAccounts(List<Coordinator> coordinators) throws RuntimeException {
        for(Coordinator coordinator : coordinators) {
            String password = emailService.generateRandomCode();
            Response response = ServerUtils.getUser(coordinator.getEmail());
            if(response.getStatus() == 404) { //Account does not exist
                User user = new User(coordinator.getEmail(), coordinator.getFullName(), password, "supervisor");
                String emailSubject = "Your account has been created!";
                String emailContent = generateContent(coordinator.getEmail(), password);
                try {
                    emailService.sendEmail(coordinator.getEmail(), emailSubject, emailContent);
                } catch (EmailException e) {
                    throw new RuntimeException(e);
                }
                ServerUtils.addUser(user);
            }
        }
    }

    /**
     * Automatically creates accounts for students, once files have been uploaded
     *
     * @param students List of students extracted from csv file, generated by Brightspace
     * @throws RuntimeException if email containing login credentials could not be sent.
     */
    public void createStudentAccounts(List<Student> students) throws RuntimeException {
        for(Student student : students) {
            String password = emailService.generateRandomCode();
            Response response = ServerUtils.getUser(student.getEmail());
            if(response.getStatus() == 404) {
                User user = new User(student.getEmail(), student.getStudentName(), password, "student");
                String emailSubject = "Your account has been created!";
                String emailContent = generateContent(student.getEmail(), password);
                try {
                    emailService.sendEmail(student.getEmail(), emailSubject, emailContent);
                } catch (EmailException e) {
                    throw new RuntimeException(e);
                }
                ServerUtils.addUser(user);
            }
        }
    }

    /**
     * Creates submissions and adds them to the database, once files have been uploaded
     *
     * @param coordinator Coordinator responsible for the submission, extracted from the zip and Excel files,
     *                    generated by Brightspace and ProjectForum
     * @throws SQLException if the file could not be added to the database
     */
    public void createSubmissions(Coordinator coordinator) throws SQLException {
        List<Association> associations = coordinator.getAssociations();
        for(Association association : associations) {
            Submission submission = association.getSubmission();
            Student student = association.getStudent();
            Blob file = new SerialBlob(submission.getSubmittedFile());
            SubmissionDB submissionDB = new SubmissionDB(
                student.getEmail(), file, coordinator.getEmail(), submission.getFileName(), null, null);

            ServerUtils.addSubmissionDB(submissionDB);
        }
    }

    /**
     * Generates the content of the email, containing login credentials, according to some predefined format
     *
     * @param username username associated to account
     * @param password password associated to account
     * @return the generated email body
     */
    public String generateContent(String username, String password) {
        return "An administrator has uploaded theses on our annotation tool! We have" +
                "created an account for you. Here are the credentials that you can use to access your" +
                "account: \n Username: <b>" + username + "</b> \n Password: <b>" +
                password + "</b> \n You can reset your password later on the platform!";
    }
}
